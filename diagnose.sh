#!/bin/bash#!/usr/bin/env bash



# Script de diagn√≥stico en Bash (wrapper para diagnose.py)# Diagn√≥stico Completo del Sistema

# Utiliza el script de Python existente y a√±ade verificaci√≥n adicional# Este script ejecuta el diagn√≥stico completo E2E y muestra el resultado



echo "üîç Iniciando diagn√≥stico completo del sistema IKU C√°bala Activa..."# Colores para mejor legibilidad

GREEN='\033[0;32m'

# Ejecutar el diagn√≥stico PythonRED='\033[0;31m'

python diagnose.pyYELLOW='\033[1;33m'

BLUE='\033[0;34m'

# Verificar el resultadoNC='\033[0m' # No Color

PYTHON_STATUS=$?

echo -e "${BLUE}=========================================================${NC}"

# Ejecutar diagn√≥sticos adicionalesecho -e "${YELLOW}üîç DIAGN√ìSTICO COMPREHENSIVO E2E - IKU CABALACTIVA${NC}"

echo -e "\n--- Diagn√≥stico adicional ---"echo -e "${BLUE}=========================================================${NC}"

echo ""

# Verificar configuraci√≥n CRM

if [ -f "src/services/crmService.js" ]; then# Verificar que estamos en la ra√≠z del proyecto

  echo "‚úÖ Servicio CRM configurado"if [ ! -f "./package.json" ]; then

else  echo -e "${RED}‚ùå Error: Este script debe ejecutarse desde la ra√≠z del proyecto${NC}"

  echo "‚ùå Servicio CRM no encontrado"  echo "   Actualmente en: $(pwd)"

  ADDITIONAL_STATUS=1  exit 1

fifi



# Verificar configuraciones de pago# Crear directorios necesarios

if [ -f ".env" ] || [ -f ".env.production" ]; thenmkdir -p ./docs/diagnostics

  echo "‚úÖ Configuraciones de entorno encontradas"

  # Generar .env.test si no existe

  # Verificar variables de entorno con el script existenteif [ ! -f "./.env" ] && [ ! -f "./.env.production" ] && [ ! -f "./.env.test" ]; then

  if [ -f "scripts/verify-env.js" ]; then  echo -e "${YELLOW}‚ö†Ô∏è No se encontr√≥ ning√∫n archivo de variables de entorno${NC}"

    node scripts/verify-env.js  echo -e "${BLUE}‚ÑπÔ∏è Generando archivo .env.test para diagn√≥stico...${NC}"

    ENV_STATUS=$?  node ./scripts/verify-env.js --generate-test

  fifi

else

  echo "‚ùå Configuraciones de entorno no encontradas"# Ejecutar diagn√≥stico completo

  ADDITIONAL_STATUS=1echo -e "${YELLOW}üìã Ejecutando diagn√≥stico completo...${NC}"

finode ./scripts/diagnose-comprehensive-e2e.js



# Verificar estado de pruebas# Verificar el resultado

if [ -d "tests" ]; thenif [ $? -eq 0 ]; then

  echo "‚úÖ Pruebas configuradas"  echo ""

else  echo -e "${GREEN}‚úÖ Diagn√≥stico completado exitosamente${NC}"

  echo "‚ùå Pruebas no encontradas"  echo -e "${BLUE}‚ÑπÔ∏è Consulta el reporte en: docs/diagnostics/e2e-errors-analysis.md${NC}"

  ADDITIONAL_STATUS=1  echo -e "${BLUE}‚ÑπÔ∏è Resultados detallados en: docs/diagnostics/comprehensive-diagnosis.json${NC}"

fi  

  # Mostrar primeras l√≠neas del reporte

# Verificar estado del repositorio Git  echo ""

if git rev-parse --git-dir > /dev/null 2>&1; then  echo -e "${YELLOW}üìù Resumen del diagn√≥stico:${NC}"

  echo "‚úÖ Repositorio Git configurado"  echo -e "${BLUE}-----------------------------------------${NC}"

    head -n 15 ./docs/diagnostics/e2e-errors-analysis.md

  # Verificar cambios sin confirmar  echo "..."

  if [ -z "$(git status --porcelain)" ]; then  echo -e "${BLUE}-----------------------------------------${NC}"

    echo "‚úÖ No hay cambios sin confirmar"  echo -e "${YELLOW}Ver el reporte completo para m√°s detalles${NC}"

  elseelse

    echo "‚ö†Ô∏è Hay cambios sin confirmar"  echo ""

  fi  echo -e "${RED}‚ùå Error durante el diagn√≥stico${NC}"

else  echo "Revisa los mensajes de error anteriores"

  echo "‚ùå No es un repositorio Git"fi

  ADDITIONAL_STATUS=1

fiecho ""

echo -e "${BLUE}=========================================================${NC}"

# Estado finalecho -e "${YELLOW}üèÅ FIN DEL DIAGN√ìSTICO${NC}"

if [ $PYTHON_STATUS -eq 0 ] && [ -z "$ADDITIONAL_STATUS" ]; thenecho -e "${BLUE}=========================================================${NC}"
  echo -e "\n‚úÖ DIAGN√ìSTICO COMPLETO: Sistema en buen estado."
  exit 0
else
  echo -e "\n‚ö†Ô∏è DIAGN√ìSTICO COMPLETO: Se encontraron problemas que requieren atenci√≥n."
  exit 1
fi