#!/bin/bash#!/usr/bin/env bash



# Script para despliegue a producci√≥n# Script de Despliegue a Producci√≥n

# Usa el script deploy.sh existente con configuraciones adicionales para producci√≥n# Este script facilita el despliegue del proyecto a producci√≥n despu√©s de verificaci√≥n



echo "üöÄ Iniciando despliegue a producci√≥n de IKU C√°bala Activa..."# Colores para mejor legibilidad

GREEN='\033[0;32m'

# Verificar que estamos en la rama principalRED='\033[0;31m'

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)YELLOW='\033[1;33m'

if [ "$CURRENT_BRANCH" != "main" ]; thenBLUE='\033[0;34m'

  echo "‚ùå ERROR: Debes estar en la rama main para desplegar a producci√≥n"NC='\033[0m' # No Color

  exit 1

fiecho -e "${BLUE}=========================================================${NC}"

echo -e "${YELLOW}üöÄ DESPLIEGUE A PRODUCCI√ìN - IKU CABALACTIVA${NC}"

# Verificar que no hay cambios sin confirmarecho -e "${BLUE}=========================================================${NC}"

if [ -n "$(git status --porcelain)" ]; thenecho ""

  echo "‚ö†Ô∏è ADVERTENCIA: Hay cambios sin confirmar. Considera confirmarlos antes de continuar."

  read -p "¬øDeseas continuar de todos modos? (s/n): " CONTINUE# Verificar que estamos en la ra√≠z del proyecto

  if [ "$CONTINUE" != "s" ]; thenif [ ! -f "./package.json" ]; then

    echo "‚ùå Despliegue abortado."  echo -e "${RED}‚ùå Error: Este script debe ejecutarse desde la ra√≠z del proyecto${NC}"

    exit 1  echo "   Actualmente en: $(pwd)"

  fi  exit 1

fifi



# Configurar variables de entorno para producci√≥n# Funci√≥n para verificar la certificaci√≥n

export NODE_ENV=productioncheck_certification() {

  local cert_file="./docs/CERTIFICACION_DESPLIEGUE_PRODUCCION.md"

# Ejecutar diagn√≥stico previo al despliegue  if [ ! -f "$cert_file" ]; then

echo "üîç Ejecutando diagn√≥stico previo al despliegue..."    echo -e "${RED}‚ùå Error: No se encontr√≥ el archivo de certificaci√≥n de despliegue${NC}"

python diagnose.py    echo "   El proyecto debe estar certificado antes de ser desplegado"

    return 1

# Si el diagn√≥stico es exitoso, continuar con el despliegue  fi

if [ $? -eq 0 ]; then  

  echo "‚úÖ Diagn√≥stico exitoso. Continuando con el despliegue..."  # Verificar que no haya issues pendientes en el reporte de diagn√≥stico

    local issues_count=$(grep -c "Total de issues: 0" "$cert_file" || echo "0")

  # Usar el script de despliegue existente  if [ "$issues_count" -eq "0" ]; then

  ./deploy.sh    echo -e "${RED}‚ùå Error: La certificaci√≥n indica issues pendientes${NC}"

      echo "   Por favor, resuelva todos los issues antes de desplegar"

  echo "üìù Actualizando documentaci√≥n de despliegue..."    return 1

  echo "Despliegue a producci√≥n completado: $(date)" >> docs/PRODUCTION_READY_REPORT.md  fi

else  

  echo "‚ùå El diagn√≥stico fall√≥. Abortando despliegue a producci√≥n."  # Verificar que todos los componentes est√©n aprobados

  exit 1  local components_count=$(grep -c "‚úÖ APROBADO" "$cert_file" || echo "0")

fi  if [ "$components_count" -lt "5" ]; then

    echo -e "${RED}‚ùå Error: No todos los componentes est√°n marcados como aprobados en la certificaci√≥n${NC}"

echo "‚úÖ Despliegue a producci√≥n completado."    echo "   Se requiere aprobaci√≥n de todos los componentes cr√≠ticos"
    return 1
  fi
  
  echo -e "${GREEN}‚úÖ Certificaci√≥n de despliegue verificada correctamente${NC}"
  return 0
}

# Funci√≥n para verificar rama
check_branch() {
  local current_branch=$(git branch --show-current)
  
  if [ "$current_branch" != "crm-payment-gateway-implementation" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Advertencia: No est√°s en la rama crm-payment-gateway-implementation${NC}"
    echo -e "   Rama actual: ${current_branch}"
    
    read -p "¬øDeseas continuar de todos modos? (s/N): " confirm
    if [[ $confirm != [sS] ]]; then
      echo -e "${BLUE}‚ÑπÔ∏è Operaci√≥n cancelada por el usuario${NC}"
      return 1
    fi
  else
    echo -e "${GREEN}‚úÖ Rama correcta: crm-payment-gateway-implementation${NC}"
  fi
  
  return 0
}

# Funci√≥n para ejecutar diagn√≥stico final
run_final_diagnosis() {
  echo -e "${YELLOW}üìã Ejecutando diagn√≥stico final pre-despliegue...${NC}"
  
  if ! ./diagnose.sh; then
    echo -e "${RED}‚ùå Error: El diagn√≥stico final ha fallado${NC}"
    echo "   No se puede proceder con el despliegue"
    return 1
  fi
  
  echo -e "${GREEN}‚úÖ Diagn√≥stico final completado exitosamente${NC}"
  return 0
}

# Funci√≥n para crear tag de versi√≥n
create_version_tag() {
  local version=$(grep -m 1 '"version":' package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')
  local tag="v$version-prod-$(date +%Y%m%d%H%M)"
  
  echo -e "${YELLOW}üìù Creando tag de versi√≥n: $tag${NC}"
  
  git tag -a "$tag" -m "Versi√≥n de producci√≥n $version - $(date)"
  git push origin "$tag"
  
  echo -e "${GREEN}‚úÖ Tag de versi√≥n creado y publicado: $tag${NC}"
  return 0
}

# Funci√≥n para preparar el despliegue
prepare_deployment() {
  echo -e "${YELLOW}üì¶ Preparando archivos para despliegue...${NC}"
  
  # Construir aplicaci√≥n
  npm run build
  
  if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå Error al construir la aplicaci√≥n${NC}"
    return 1
  fi
  
  # Verificar que el directorio dist existe y tiene contenido
  if [ ! -d "./dist" ] || [ -z "$(ls -A ./dist)" ]; then
    echo -e "${RED}‚ùå Error: El directorio 'dist' no existe o est√° vac√≠o${NC}"
    return 1
  fi
  
  # Copiar archivos de configuraci√≥n necesarios
  cp .env.production ./dist/.env || true
  cp nginx.conf ./dist/nginx.conf || true
  
  echo -e "${GREEN}‚úÖ Preparaci√≥n de archivos completada${NC}"
  return 0
}

# Funci√≥n para realizar despliegue a producci√≥n
perform_deployment() {
  echo -e "${YELLOW}üöÄ Iniciando despliegue a producci√≥n...${NC}"
  
  # L√≥gica para desplegar a producci√≥n
  # Este es un ejemplo, se deber√≠a adaptar seg√∫n la infraestructura real
  
  if [ -f "./deploy.sh" ]; then
    echo -e "${BLUE}‚ÑπÔ∏è Utilizando script de despliegue existente: deploy.sh${NC}"
    ./deploy.sh --env=production
    deploy_status=$?
  else
    echo -e "${YELLOW}‚ö†Ô∏è No se encontr√≥ script de despliegue. Usando m√©todo alternativo...${NC}"
    
    # M√©todo alternativo (ejemplo)
    # rsync -avz --delete ./dist/ usuario@servidor:/ruta/a/produccion/
    echo -e "${RED}‚ùå Error: M√©todo de despliegue alternativo no implementado${NC}"
    echo "   Por favor implemente el m√©todo de despliegue adecuado"
    deploy_status=1
  fi
  
  if [ $deploy_status -ne 0 ]; then
    echo -e "${RED}‚ùå Error durante el despliegue${NC}"
    return 1
  fi
  
  echo -e "${GREEN}‚úÖ Despliegue a producci√≥n completado exitosamente${NC}"
  return 0
}

# Funci√≥n para verificar el despliegue
verify_deployment() {
  echo -e "${YELLOW}üîç Verificando despliegue en producci√≥n...${NC}"
  
  # Este paso deber√≠a incluir:
  # 1. Pruebas de humo en producci√≥n
  # 2. Verificaci√≥n de conectividad a servicios externos
  # 3. Validaci√≥n de funcionamiento b√°sico
  
  echo -e "${BLUE}‚ÑπÔ∏è Verificaci√≥n de despliegue completada${NC}"
  echo -e "${YELLOW}‚ö†Ô∏è IMPORTANTE: Monitorear m√©tricas durante las pr√≥ximas 48 horas${NC}"
  
  return 0
}

# Flujo principal
main() {
  echo -e "${BLUE}Iniciando proceso de despliegue a producci√≥n...${NC}"
  
  # Paso 1: Verificar certificaci√≥n
  echo -e "\n${YELLOW}PASO 1: Verificando certificaci√≥n de despliegue${NC}"
  check_certification
  if [ $? -ne 0 ]; then exit 1; fi
  
  # Paso 2: Verificar rama
  echo -e "\n${YELLOW}PASO 2: Verificando rama actual${NC}"
  check_branch
  if [ $? -ne 0 ]; then exit 1; fi
  
  # Paso 3: Ejecutar diagn√≥stico final
  echo -e "\n${YELLOW}PASO 3: Ejecutando diagn√≥stico final${NC}"
  run_final_diagnosis
  if [ $? -ne 0 ]; then exit 1; fi
  
  # Paso 4: Confirmar con el usuario
  echo -e "\n${YELLOW}PASO 4: Confirmaci√≥n para continuar${NC}"
  read -p "¬øEst√°s seguro de que deseas desplegar a producci√≥n? (s/N): " confirm
  if [[ $confirm != [sS] ]]; then
    echo -e "${BLUE}‚ÑπÔ∏è Operaci√≥n cancelada por el usuario${NC}"
    exit 0
  fi
  
  # Paso 5: Crear tag de versi√≥n
  echo -e "\n${YELLOW}PASO 5: Creando tag de versi√≥n${NC}"
  create_version_tag
  if [ $? -ne 0 ]; then exit 1; fi
  
  # Paso 6: Preparar despliegue
  echo -e "\n${YELLOW}PASO 6: Preparando archivos para despliegue${NC}"
  prepare_deployment
  if [ $? -ne 0 ]; then exit 1; fi
  
  # Paso 7: Realizar despliegue
  echo -e "\n${YELLOW}PASO 7: Realizando despliegue${NC}"
  perform_deployment
  if [ $? -ne 0 ]; then exit 1; fi
  
  # Paso 8: Verificar despliegue
  echo -e "\n${YELLOW}PASO 8: Verificando despliegue${NC}"
  verify_deployment
  
  # √âxito
  echo -e "\n${GREEN}‚úÖ DESPLIEGUE A PRODUCCI√ìN COMPLETADO EXITOSAMENTE${NC}"
  echo -e "${BLUE}=========================================================${NC}"
  echo -e "${YELLOW}üèÅ SISTEMA EN PRODUCCI√ìN${NC}"
  echo -e "${BLUE}=========================================================${NC}"
}

# Ejecutar flujo principal
main